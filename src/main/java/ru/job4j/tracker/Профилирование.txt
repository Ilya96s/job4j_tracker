Анализ с помощью утилиты jmap
При запуске программы, когда объекты еще не созданы heap = 10774,72 мб
После создания заявок heap = 21207,13 мб
После удаления всех заявок heap = 63490 мб


Анализ с помощью утилиты jstat
После запуска программы, когда заявки еще не созданы
S0C: размер первой выживающей области = 0
S1C: Размер второй выжившей области = 0
S0U: размер первой выжившей области = 0
S1U: размер второй выжившей области = 0
EC: размер Eden Park = 14336,0
EU: используйте размер Eden Park = 10240
OC: Размер старого поколения = 83968
OU: размер использования старого поколения = 0
MC: размер области метода = 0
MU: Размер использования области метода  = 0
CCSC: размер сжатого пространства класса = 0
CCSU: сжатый размер использования пространства класса = 0
YGC: молодое поколение собирает мусор = 0
YGCT: сборка мусора молодого поколения требует времени = 0
FGC: количество сборок мусора в старом поколении = 0
FGCT: сборка мусора старого времени требует времени = 0
GCT: общее время, затрачиваемое на сборку мусора = 0

После создания заявок
S0C: размер первой выживающей области = 0
S1C: Размер второй выжившей области = 1024
S0U: размер первой выжившей области = 0
S1U: размер второй выжившей области = 44,3
EC: размер Eden Park = 60416
EU: используйте размер Eden Park = 15360
OC: Размер старого поколения = 83968
OU: размер использования старого поколения = 36868
MC: размер области метода = 3605
MU: Размер использования области метода  = 5990,2
CCSC: размер сжатого пространства класса = 640
CCSU: сжатый размер использования пространства класса = 549,5
YGC: молодое поколение собирает мусор = 7
YGCT: сборка мусора молодого поколения требует времени = 0,018
FGC: количество сборок мусора в старом поколении = 0
FGCT: сборка мусора старого времени требует времени = 0
GCT: общее время, затрачиваемое на сборку мусора = 0,018

После удаления всех заявок
S0C: размер первой выживающей области = 0
S1C: Размер второй выжившей области = 2048
S0U: размер первой выжившей области = 0
S1U: размер второй выжившей области = 2048
EC: размер Eden Park = 35840
EU: используйте размер Eden Park = 22528
OC: Размер старого поколения = 60416
OU: размер использования старого поколения = 34304,0
MC: размер области метода = 5952,0
MU: Размер использования области метода  = 5770,3
CCSC: размер сжатого пространства класса = 640,0
CCSU: сжатый размер использования пространства класса = 550,5
YGC: молодое поколение собирает мусор = 10
YGCT: сборка мусора молодого поколения требует времени = 0,086
FGC: количество сборок мусора в старом поколении = 0
FGCT: сборка мусора старого времени требует времени = 0
GCT: общее время, затрачиваемое на сборку мусора = 0,086

Анализ с помощью утилиты jconsole
При запуске программы до создания заявок
heap = 4 мб из 1,6 гб
После создания заявок
heap = 60 мб из 1,6 гб после чего была произведена сборка мусора и heap стал = 5,5 мб
После удаление всех заявок
heap = 65 мб из 1,6 гб после чего была произведена сборка мусора и heap стал = 38 мб

Добился состояния выхода за пределы памяти путем установки размера heap = 8
При этом, при вызове утилиты jmap было отказано в доступе Exception in thread "main" com.sun.tools.attach.AttachNotSupportedException: Отказано в доступе
Так же было прервано подключение с утилитой jconsole